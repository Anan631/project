datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User Management
model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  passwordHash  String   @map("password_hash")
  role          UserRole
  status        UserStatus @default(ACTIVE)
  phone         String?
  profileImage  String?
  resetToken    String?
  resetTokenExpiry DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  projects      Project[]
  costReports   CostReport[]
  logs          LogEntry[]

  @@map("users")
}

enum UserRole {
  ADMIN
  ENGINEER
  OWNER
  GENERAL_USER
}

enum UserStatus {
  ACTIVE
  PENDING_APPROVAL
  SUSPENDED
  DELETED
}

// Project Management
model Project {
  id              Int      @id @default(autoincrement())
  name            String
  location        String
  description     String?
  startDate       DateTime
  endDate         DateTime
  status          ProjectStatus
  engineer        String?
  clientName      String?
  budget          Float?
  overallProgress Int      @default(0)
  quantitySummary String   @default("")
  linkedOwnerEmail String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
  photos          ProjectPhoto[]
  timelineTasks   TimelineTask[]
  comments        ProjectComment[]
  costReports     CostReport[]

  @@map("projects")
}

enum ProjectStatus {
  مخطط_له
  قيد_التنفيذ
  مكتمل
  مؤرشف
}

// Project Photos
model ProjectPhoto {
  id          String  @id @default(cuid())
  src         String
  alt         String
  caption     String?
  dataAiHint  String?
  projectId   Int
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_photos")
}

// Timeline Tasks
model TimelineTask {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  color     String   @default("#3b82f6")
  status    TaskStatus @default(مخطط_له)
  progress  Int?
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("timeline_tasks")
}

enum TaskStatus {
  مخطط_له
  قيد_التنفيذ
  مكتمل
}

// Project Comments
model ProjectComment {
  id           String   @id @default(cuid())
  user         String
  text         String
  date         DateTime @default(now())
  avatar       String?
  dataAiHintAvatar String?
  projectId    Int
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_comments")
}

// Cost Reports
model CostReport {
  id            String   @id @default(cuid())
  projectId     Int
  reportName    String
  engineerId    String
  engineerName  String
  ownerId       String
  ownerName     String
  totalCostILS  Float    @map("total_cost_ils")
  createdAt     DateTime @default(now())

  // Relations
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User?    @relation(fields: [engineerId], references: [id])
  items         CostReportItem[]

  @@map("cost_reports")
}

// Cost Report Items
model CostReportItem {
  id           String     @id @default(cuid())
  name         String
  quantity     Float
  unit         String
  pricePerUnit Float      @map("price_per_unit_ils")
  totalCost    Float      @map("total_cost_ils")
  costReportId String
  costReport   CostReport @relation(fields: [costReportId], references: [id], onDelete: Cascade)

  @@map("cost_report_items")
}

// System Logs
model LogEntry {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  level     LogLevel
  message   String
  user      String?
  action    String?
  userId    String?
  userRef   User?    @relation(fields: [userId], references: [id])

  @@map("log_entries")
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  SUCCESS
}

// System Settings
model SystemSettings {
  id                        String @id @default(cuid())
  siteName                  String @default("المحترف لحساب الكميات")
  defaultLanguage           String @default("ar")
  maintenanceMode           Boolean @default(false)
  maxUploadSizeMB           Int    @default(25)
  emailNotificationsEnabled Boolean @default(true)
  updatedAt                 DateTime @updatedAt

  @@map("system_settings")
}
